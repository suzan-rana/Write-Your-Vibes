// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String
    emailVerified DateTime?
    gender String
    image         String?
    biography String @db.LongText
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments       Comment[]
    chats ManyChatManyUser[]
    messages Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    subtitle  String
    body      String @db.LongText
    image     String
    slug String
    authorId  String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    comments Comment[]
    tags Tags[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String @db.LongText
    postId String
    post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
    authorId  String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model Tags {
    id String @id @default(cuid())
    tag_name String
    postId String
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Chat {
    id String @id @default(cuid())
    messages Message[]
    users ManyChatManyUser[]
}

model ManyChatManyUser {
    chatId String 
    chat Chat @relation(fields: [chatId], references: [id])
    userId String
    user User @relation(fields: [userId], references: [id])
    @@id([chatId, userId])
}

model Message {
    id String @id @default(cuid())
    message_content String @db.LongText
    chatId String
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
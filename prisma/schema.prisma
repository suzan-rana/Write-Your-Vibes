generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model chat {
  id               String             @id @default(cuid())
  manychatmanyuser manychatmanyuser[]
  message          message[]
}

model category {
  id            String @id @default(cuid())
  category_name String @unique
  posts         post[]
}

model post {
  id         String     @id @default(cuid())
  title      String
  subtitle   String     @db.MediumText
  body       String     @db.LongText
  image      String
  slug       String
  authorId   String
  createdAt  DateTime   @default(now())
  comment    comment[]
  categoryId String
  category   category   @relation(fields: [categoryId], references: [id])
  user       user       @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Post_authorId_fkey")
  reaction   reaction[]
  tags       tags[]

  @@index([authorId], map: "Post_authorId_fkey")
}

model tags {
  id       String @id @default(cuid())
  tag_name String
  postId   String
  post     post   @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Tags_postId_fkey")

  @@index([postId], map: "Tags_postId_fkey")
}

model user {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique(map: "User_email_key")
  password         String
  emailVerified    DateTime?
  gender           String
  salary           Float?
  image            String?            @db.LongText
  biography        String             @db.LongText
  account          account[]
  comment          comment[]
  manychatmanyuser manychatmanyuser[]
  message          message[]
  post             post[]
  reaction         reaction[]
  session          session[]
}

model comment {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Comment_authorId_fkey")
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Comment_postId_fkey")

  @@index([authorId], map: "Comment_authorId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
}

model manychatmanyuser {
  chatId String
  userId String
  chat   chat   @relation(fields: [chatId], references: [id], map: "ManyChatManyUser_chatId_fkey")
  user   user   @relation(fields: [userId], references: [id], map: "ManyChatManyUser_userId_fkey")

  @@id([chatId, userId])
  @@index([userId], map: "ManyChatManyUser_userId_fkey")
}

model message {
  id              String @id @default(cuid())
  message_content String @db.LongText
  chatId          String
  userId          String
  chat            chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, map: "Message_chatId_fkey")
  user            user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Message_userId_fkey")

  @@index([chatId], map: "Message_chatId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model reaction {
  id     String @id @default(cuid())
  userId String
  postId String
  type   String
  post   post   @relation(fields: [postId], references: [id], map: "Reaction_postId_fkey")
  user   user   @relation(fields: [userId], references: [id], map: "Reaction_userId_fkey")

  @@unique([postId, userId])
  @@index([postId], map: "Reaction_postId_fkey")
  @@index([userId], map: "Reaction_userId_fkey")
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
